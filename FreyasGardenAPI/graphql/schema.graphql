type User {
    id: ID!
    username: String!
    email: String!
    city: String
    birthdate: String
    role: Role
    active: Boolean
    plants: [Plant]
    posts: [Post]
}

type Role {
    id: ID!
    role_name: String!
}

type Plant {
    id: ID!
    name: String!
    latin_name: String
    articles: [Article]
    owners: [User]
}

type Article {
    id: ID!
    title: String!
    plant_id: Int
    source: String!
    plant: Plant
}

type Post {
    id: ID!
    user_id: Int!
    city: String
    title: String!
    plant: Plant
    description: String
    media: String
    sell: Boolean
}


type Query {
    users: [User] @field(resolver: "App\\GraphQL\\Queries\\UsersQuery@resolve")
    user(id: ID!): User
    posts: [Post]
    post(id: ID!): Post
    plants: [Plant]
    plant(id: ID!): Plant
    articles: [Article]
    article(id: ID!): Article
}

type Mutation {
    createUser(username: String!, email: String!, password: String!, city: String, birthdate: String): User @field(resolver: "App\\GraphQL\\Mutations\\CreateUserMutation@resolve")
    createPost(user_id: Int!, title: String!, description: String!, city: String, plant: Int, media: String, sell: Boolean): Post
    createPlant(name: String!, latin_name: String!): Plant
}
